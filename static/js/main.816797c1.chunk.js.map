{"version":3,"sources":["types/Todo.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","components/FilteredByStatus/FilteredByStatus.tsx","index.tsx"],"names":["Status","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","isSelected","id","classNames","completed","title","type","onClick","TodoFilter","query","status","setStatus","resetQuery","onQueryChange","value","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","TodoModal","useState","currentUser","setCurrentUser","hasError","setHasError","useEffect","a","user","fetchUser","href","email","name","App","visibleTodos","setVisibleTodos","setQuery","hasLoadingError","setHasLoadingError","fetchData","filteredTodos","useMemo","filter","Error","lowerCaseQuery","toLowerCase","includes","FilteredByStatus","useCallback","isLoadingFinished","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.816797c1.chunk.js","sourcesContent":["export interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  setSelectedTodo: (value: Todo | null) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const isSelected = selectedTodo?.id === todo.id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={classNames({\n                'has-background-info-light': isSelected,\n              })}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames('far', {\n                        'fa-eye': selectedTodo?.id !== todo.id,\n                        'fa-eye-slash': isSelected,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Todo';\n\ntype Props = {\n  query: string;\n  onQueryChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  resetQuery: () => void;\n  status: Status;\n  setStatus: (value: Status) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  status,\n  setStatus,\n  resetQuery,\n  onQueryChange,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => setStatus(event.target.value as Status)}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={onQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedTodo: Todo;\n  setSelectedTodo: (value: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const user = await getUser(selectedTodo.userId);\n\n        setCurrentUser(user);\n      } catch {\n        setHasError(true);\n      }\n    }\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser || !selectedTodo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setSelectedTodo(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              {!hasError\n                ? (\n                  <a href={`mailto:${currentUser?.email}`}>\n                    {currentUser?.name}\n                  </a>\n                ) : (\n                  <strong>Unknown</strong>\n                )}\n            </p>\n\n            {hasError && (\n              <div className=\"notification is-warning\">\n                Server error!\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useMemo, useEffect, useState, useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo, Status } from './types/Todo';\nimport { FilteredByStatus } from './components/FilteredByStatus/FilteredByStatus';\n\nexport const App: React.FC = () => {\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState<Status>(Status.ALL);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const todos = await getTodos();\n\n        setVisibleTodos(todos);\n        setHasLoadingError(false);\n      } catch {\n        setHasLoadingError(true);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return FilteredByStatus(visibleTodos, query, status);\n  }, [status, visibleTodos, query]);\n\n  const onQueryChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n    },\n    [],\n  );\n\n  const resetQuery = useCallback(() => {\n    setQuery('');\n  }, []);\n\n  const isLoadingFinished = (hasLoadingError && visibleTodos.length === 0) || visibleTodos.length;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={onQueryChange}\n                resetQuery={resetQuery}\n                status={status}\n                setStatus={setStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingFinished\n                ? (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )\n                : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Status, Todo } from '../../types/Todo';\n\nexport const FilteredByStatus = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n) => {\n  let filteredTodos = [...todos];\n\n  if (status !== Status.ALL) {\n    filteredTodos = filteredTodos.filter(todo => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n        case Status.COMPLETED:\n          return todo.completed;\n        default:\n          throw new Error('Status is incorrect');\n      }\n    });\n  }\n\n  if (query) {\n    const lowerCaseQuery = query.toLowerCase();\n\n    filteredTodos = filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(lowerCaseQuery)\n    ));\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}